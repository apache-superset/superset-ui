import Loadable, { LoadableComponent } from 'react-loadable';

export type LoadableRendererProps = {
  onRenderFailure?: Function;
  onRenderSuccess?: Function;
};

const defaultProps = {
  onRenderFailure() {},
  onRenderSuccess() {},
};

export default function createLoadableRenderer<Props extends object, Exports>(
  options: Loadable.OptionsWithMap<Props, Exports>,
): LoadableComponent {
  const LoadableRenderer = Loadable.Map(options) as React.ComponentClass<
    Props & LoadableRendererProps,
    any
  > &
    Loadable.LoadableComponent;

  // Extends the behavior of LoadableComponent
  // generated by react-loadable
  // to provide post-render listeners
  class CustomLoadableRenderer extends LoadableRenderer {
    static defaultProps: object;

    componentDidMount() {
      this.afterRender();
    }

    componentDidUpdate() {
      this.afterRender();
    }

    afterRender() {
      const { loaded, loading, error } = this.state;
      const { onRenderFailure, onRenderSuccess } = this.props;
      if (!loading) {
        if (error && onRenderFailure) {
          onRenderFailure(error);
        } else if (loaded && Object.keys(loaded).length > 0 && onRenderSuccess) {
          onRenderSuccess();
        }
      }
    }
  }

  CustomLoadableRenderer.defaultProps = defaultProps;
  CustomLoadableRenderer.preload = LoadableRenderer.preload;

  return CustomLoadableRenderer;
}
